name: Publish to ghcr and Google Cloud Run

on:
  workflow_dispatch:
  push:
    branches: [ "main", "m-feat-retag" ]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "main" ]

env:
  BASE_IMAGE_NAME: ${{ github.repository }}
  LOCAL_REGISTRY: ghcr.io
  REGION: europe-west1
  PROJECT_ID: neuro-inclusive-transit
  BASE_SERVICE_NAME: ${{ github.event.repository.name }}
  GAR_LOCATION: europe-west3

jobs:
  build:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    strategy:
      matrix:
        images:
          - 'challenge-api'
          - 'disturbance-api'
          - 'route-api'

    steps:
      - name: Checkout repository
        uses: actions/checkout@8ade135a41bc03ea155e62e844d188df1ea18608 #v4.1.0

      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@11086d25041f77fe8fe7b9ea4e48e3b9192b8f19 #v3.1.2
        with:
          cosign-release: 'v1.13.1'

      # Workaround: https://github.com/docker/build-push-action/issues/461
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 #v3.0.0

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.LOCAL_REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d #v3.0.0
        with:
          registry: ${{ env.LOCAL_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 #v5.0.0
        with:
          images: ${{ env.LOCAL_REGISTRY }}/${{ env.BASE_IMAGE_NAME }}-${{ matrix.images }}
          tags: |
            type=ref,event=branch
            type=raw,value=${{ github.sha }},enable=${{ github.ref_type != 'tag' }}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 #v5.0.0
        with:
          context: .
          build-args: |
            SERVICE_NAME=${{ matrix.images }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Sign the resulting Docker image digest except on PRs.
      # https://github.com/sigstore/cosign
      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          COSIGN_EXPERIMENTAL: "true"
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: echo "${{ steps.meta.outputs.tags }}" | xargs -I {} cosign sign {}@${{ steps.build-and-push.outputs.digest }}

  pre_publish:
    runs-on: ubuntu-latest
    needs:
      - build
    if: ${{ github.event_name != 'pull_request' }}

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: Checkout repository
        uses: actions/checkout@8ade135a41bc03ea155e62e844d188df1ea18608 #v4.1.0

      - name: Google Auth
        id: auth
        uses: google-github-actions/auth@35b0e87d162680511bf346c299f71c9c5c379033 #v1.1.1
        with:
          token_format: 'access_token'
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      - name: Make sure Google Artifact Repository exists
        run: |-
          if ! gcloud artifacts repositories list | grep -qE "^${{ env.BASE_SERVICE_NAME }}$"; then
            echo "Repository already exists"
          else
            gcloud artifacts repositories create ${{ env.BASE_SERVICE_NAME }} --repository-format=docker --location=${{ env.GAR_LOCATION }} --description="Docker images for ${{ env.BASE_SERVICE_NAME }}"
          fi


  publish:
    runs-on: ubuntu-latest
    needs:
      - pre_publish
      - build
    if: ${{ github.event_name != 'pull_request' }}

    permissions:
      contents: 'read'
      id-token: 'write'

    strategy:
      matrix:
        images:
          - 'disturbance-api'
          - 'route-api'

    outputs:
      GHCR_TAG: ${{ steps.generate-names.outputs.GHCR_TAG }}
      GCR_TAG: ${{ steps.generate-names.outputs.GCR_TAG }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@8ade135a41bc03ea155e62e844d188df1ea18608 #v4.1.0

      - name: Google Auth
        id: auth
        uses: google-github-actions/auth@35b0e87d162680511bf346c299f71c9c5c379033 #v1.1.1
        with:
          token_format: 'access_token'
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      # Authenticate Docker to Google Cloud Artifact Registry
      - name: Docker Auth
        id: docker-auth
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d #v3.0.0
        with:
          username: 'oauth2accesstoken'
          password: '${{ steps.auth.outputs.access_token }}'
          registry: '${{ env.GAR_LOCATION }}-docker.pkg.dev'

      - name: Generate Names for Images
        id: generate-names
        run: |-
          echo "GHCR_TAG=${{ env.LOCAL_REGISTRY }}/${{ env.BASE_IMAGE_NAME }}-${{ matrix.images }}:${{ github.sha }}" >> "$GITHUB_OUTPUT"
          echo "GCR_TAG=${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.BASE_SERVICE_NAME }}/${{ matrix.images }}:${{ github.sha }}" >> "$GITHUB_OUTPUT"

      - name: Tag and Push Docker image to Google Artifact Registry
        run: |-
          docker pull ${{ steps.generate-names.outputs.GHCR_TAG }}
          docker tag ${{ steps.generate-names.outputs.GHCR_TAG }} ${{ steps.generate-names.outputs.GCR_TAG }}
          docker push ${{ steps.generate-names.outputs.GCR_TAG }}

      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@e62f655d5754bec48078a72edc015367b01ee97b #v1.0.2
        with:
          service: ${{ env.BASE_SERVICE_NAME }}-${{ matrix.images }}
          region: ${{ env.REGION }}
          image: ${{ steps.generate-names.outputs.GCR_TAG }}
          env_vars: |
            SERVICE_NAME=${{ matrix.images }}


      # If required, use the Cloud Run url output in later steps
      - name: Show Output
        run: echo ${{ steps.deploy.outputs.url }}
